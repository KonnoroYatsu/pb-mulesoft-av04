package com.example.avalicao04.util;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.skyscreamer.jsonassert.JSONCompare;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;

import com.example.avalicao04.autentication.Token;
import com.example.avalicao04.constant.Brand;
import com.example.avalicao04.constant.Currency;
import com.example.avalicao04.constant.PaymentStatus;
import com.example.avalicao04.constant.PaymentType;
import com.example.avalicao04.dto.CardDto;
import com.example.avalicao04.dto.PaymentDto;
import com.example.avalicao04.entity.PaymentEntity;
import com.example.avalicao04.exception.InvalidValueException;
import com.example.avalicao04.form.CardForm;
import com.example.avalicao04.form.ItemForm;
import com.example.avalicao04.form.OrderForm;
import com.example.avalicao04.pbBank.Authorization;
import com.example.avalicao04.pbBank.PaymentResponseForm;

class MappersUtilTest {

    private MappersUtil mappersUtil;

    @BeforeEach
    void inicialize() {
        this.mappersUtil = new MappersUtil();
    }

    @Test
    void deveriaConverterPaymentEntityParaPaymentDto() {
        PaymentEntity paymentEntity = criarPaymentsEntity().get(0);

        PaymentDto paymentDto = mappersUtil.convertPaymentEntityToDto(paymentEntity);

        Assert.assertEquals(paymentEntity.getOrderId(), paymentDto.getOrderId());
        Assert.assertEquals(paymentEntity.getTotal(), paymentDto.getTotal());
        Assert.assertEquals(paymentEntity.getPaymentId(), paymentDto.getPaymentId());
        Assert.assertEquals(paymentEntity.getPaymentStatus(), paymentDto.getPaymentStatus());
        Assert.assertEquals(paymentEntity.getMessage(), paymentDto.getMessage());
    }

    @Test
    void deveriaConverterCardFormParaCardDto() {
        CardForm cardForm = criarCardForm();

        CardDto cardDto = mappersUtil.convertCardFormToDto(cardForm);

        Assert.assertEquals(cardForm.getCardNumber(), cardDto.getCardNumber());
        Assert.assertEquals(cardForm.getCardholderName(), cardDto.getCardholderName());
        Assert.assertEquals(cardForm.getSecurityCode(), cardDto.getSecurityCode());
        Assert.assertEquals(cardForm.getExpirationMonth(), cardDto.getExpirationMonth());
        Assert.assertEquals(cardForm.getExpirationYear(), cardDto.getExpirationYear());
        Assert.assertEquals(cardForm.getBrand(), cardDto.getBrand().toString());
    }

    @Test
    void deveriaConverterPaymentResponseFormParaPaymentEntity() {
        PaymentResponseForm paymentResponseForm = criarPaymentResponseForm();

        PaymentEntity paymentEntity = mappersUtil
                .convertPaymentResponseFormToPaymentEntity(paymentResponseForm);

        Assert.assertEquals(paymentResponseForm.getTransactionAmount(), paymentEntity.getTotal());
        Assert.assertEquals(paymentResponseForm.getPaymentId(), paymentEntity.getPaymentId());
        Assert.assertEquals(paymentResponseForm.getStatus(), paymentEntity.getPaymentStatus().toString());
        Assert.assertEquals(paymentResponseForm.getAuthorization().getReasonMessage(), paymentEntity.getMessage());
    }

    @Test
    void deveriaRetornarUmaBrandQuandoReceberUmaStringDeBrand() {
        Brand brand = mappersUtil.convertStringToBrand("MASTERCARD");
        Assert.assertEquals(Brand.MASTERCARD, brand);
        brand = mappersUtil.convertStringToBrand("mastercard");
        Assert.assertEquals(Brand.MASTERCARD, brand);

        brand = mappersUtil.convertStringToBrand("VISA");
        Assert.assertEquals(Brand.VISA, brand);
        brand = mappersUtil.convertStringToBrand("visa");
        Assert.assertEquals(Brand.VISA, brand);

        brand = mappersUtil.convertStringToBrand("ELO");
        Assert.assertEquals(Brand.ELO, brand);
        brand = mappersUtil.convertStringToBrand("elo");
        Assert.assertEquals(Brand.ELO, brand);

        brand = mappersUtil.convertStringToBrand("AMERICAN-EXPRESS");
        Assert.assertEquals(Brand.AMERICAN_EXPRESS, brand);
        brand = mappersUtil.convertStringToBrand("american-express");
        Assert.assertEquals(Brand.AMERICAN_EXPRESS, brand);
    }

    @Test
    void deveriaRetornarUmInvalidValueExceptionQuandoReceberUmaStringDeBrandInvalida() {
        Assert.assertThrows(InvalidValueException.class, () -> mappersUtil.convertStringToBrand("MASTER"));
    }

    @Test
    void deveriaRetornarUmaCurrencyQuandoReceberUmaStringDeCurrency() {
        Currency currency = mappersUtil.convertStringToCurrency("BRL");
        Assert.assertEquals(Currency.BRL, currency);
        currency = mappersUtil.convertStringToCurrency("brl");
        Assert.assertEquals(Currency.BRL, currency);
    }

    @Test
    void deveriaRetornarUmInvalidValueExceptionQuandoReceberUmaStringDeCurrencyInvalida() {
        Assert.assertThrows(InvalidValueException.class, () -> mappersUtil.convertStringToCurrency("EURO"));
    }

    @Test
    void deveriaRetornarUmPaymentTypeQuandoReceberUmaStringDePaymentType() {
        PaymentType paymentType = mappersUtil.convertStringToPaymentType("CREDIT-CARD");
        Assert.assertEquals(PaymentType.CREDIT_CARD, paymentType);
        paymentType = mappersUtil.convertStringToPaymentType("credit-card");
        Assert.assertEquals(PaymentType.CREDIT_CARD, paymentType);
    }

    @Test
    void deveriaRetornarUmInvalidValueExceptionQuandoReceberUmaStringDePaymentTypeInvalida() {
        Assert.assertThrows(InvalidValueException.class, () -> mappersUtil.convertStringToPaymentType("CASH"));
    }

    @Test
    void deveriaRetornarUmHttpHeadersComOTokenParaAutenticacaoNoPBBank() {
        Token token = criarToken();
        
        HttpHeaders headers = mappersUtil.createPaymentRequestHeader(token);
        
        Assert.assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());
        Assert.assertTrue(headers.containsKey("Authorization"));
        Assert.assertTrue(headers.toString().contains("Bearer " + token.getAccessToken()));
    }

    @Test
    void deveriaRetornarUmaStringRepresentandoOBodyDaRequisicaoDePagamentoParaPBBank() {
        OrderForm orderForm = criarOrderForm();
        
        String paymenRequestBodyJSON =  mappersUtil.createPaymentRequestBody(orderForm);
        System.out.println(paymenRequestBodyJSON);
        
        Assert.assertTrue(paymenRequestBodyJSON.contains("\"transaction_amount\":255.44"));
        Assert.assertTrue(paymenRequestBodyJSON.contains("\"cardholder_name\":\"JOAO MURILO\""));
        Assert.assertTrue(paymenRequestBodyJSON.contains("\"document_number\":\"43209756409\""));
    }
    
    
    
    private List<PaymentEntity> criarPaymentsEntity() {
        List<PaymentEntity> paymentsEntity = new ArrayList<>();
        paymentsEntity.add(new PaymentEntity(
                12345678910L,
                234.9,
                "1c3a1fec-9c4b-4b86-a2a2-ff537d29d3c7",
                PaymentStatus.APPROVED,
                "transaction approved"));

        paymentsEntity.add(new PaymentEntity(
                12345288910L,
                423.2,
                "1c3a1fec-4b86-a2a2-ff537d-9c4b-29d3c7",
                PaymentStatus.REPROVED,
                "transaction reproved"));
        return paymentsEntity;
    }

    private Token criarToken() {
        Token token = new Token("akjhfdjkahdf&odihfjakbwe", "Bearer", "180");
        return token;
    }

    private OrderForm criarOrderForm() {
        CardForm cardForm = criarCardForm();

        List<ItemForm> itemsForm = new ArrayList<>();

        itemsForm.add(new ItemForm("Item 01", 12.45, 10));

        itemsForm.add(new ItemForm("Item 02", 12.45, 10));

        OrderForm orderForm = new OrderForm("43209756409",
                itemsForm, 9.87, 3.43, "CREDIT-CARD",
                "BRL", cardForm);

        return orderForm;
    }

    private CardForm criarCardForm() {
        CardForm cardForm = new CardForm(
                "6721546712123",
                "JOAO MURILO",
                "312",
                8,
                "10",
                "MASTERCARD");
        return cardForm;
    }

    private PaymentResponseForm criarPaymentResponseForm() {
        Authorization authorization = new Authorization(
                1659361102747L,
                "2022-08-01T13:38:32.747325",
                0L,
                "transaction approved");

        PaymentResponseForm paymentResponseForm = new PaymentResponseForm(
                "00a57182-082e-4230-865c-a2840f1c28d9",
                "6eb2412c-165a-41cd-b1d9-76c575d70a28",
                67.9,
                "BRL",
                "APPROVED",
                "2022-08-01T13:38:22.747317",
                authorization);
        return paymentResponseForm;
    }
}
