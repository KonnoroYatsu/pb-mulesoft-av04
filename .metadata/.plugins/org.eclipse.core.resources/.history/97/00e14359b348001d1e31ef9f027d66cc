package com.example.avalicao04.util;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Arrays;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.avalicao04.autentication.SellerAutentication;
import com.example.avalicao04.autentication.Token;
import com.example.avalicao04.constant.Brand;
import com.example.avalicao04.constant.Currency;
import com.example.avalicao04.constant.DocumentType;
import com.example.avalicao04.constant.PaymentStatus;
import com.example.avalicao04.constant.PaymentType;
import com.example.avalicao04.dto.CardDto;
import com.example.avalicao04.dto.ClientAutenticationDto;
import com.example.avalicao04.dto.CustomerDto;
import com.example.avalicao04.dto.PaymentDto;
import com.example.avalicao04.entity.PaymentEntity;
import com.example.avalicao04.exception.InvalidValueException;
import com.example.avalicao04.form.CardForm;
import com.example.avalicao04.form.OrderForm;
import com.example.avalicao04.pbBank.PaymentRequestDto;
import com.example.avalicao04.pbBank.PaymentResponseForm;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class MappersUtil {

    public PaymentDto convertPaymentEntityToDto(PaymentEntity paymentEntity) {
        PaymentDto paymentDto = new PaymentDto(
                paymentEntity.getOrderId(),
                paymentEntity.getTotal(),
                paymentEntity.getPaymentId(),
                paymentEntity.getPaymentStatus(),
                paymentEntity.getMessage());
        return paymentDto;
    }
    
    public CardDto convertCardFormToDto(CardForm cardForm) {        
        CardDto cardDto = new CardDto(
                cardForm.getCardNumber(),
                cardForm.getCardholderName(),
                cardForm.getSecurityCode(),
                cardForm.getExpirationMonth(),
                cardForm.getExpirationYear(),
                this.convertStringToBrand(cardForm.getBrand()));
        return cardDto;
    }
    
    
    
    
    
    

    public String createPaymentRequestBody(OrderForm orderForm) {
        SellerAutentication sellerAutentication = new SellerAutentication();
        CustomerDto costumerDto = new CustomerDto(
                DocumentType.CPF, 
                orderForm.getCpf());
        Double total = (double) 0;

        for (int i = 0; i < orderForm.getItems().size(); i++) {
            total += (orderForm.getItems().get(i).getPrice()) * (orderForm.getItems().get(i).getQty());
        }
        total += orderForm.getShipping();
        total -= orderForm.getDiscount();
        total = BigDecimal.valueOf(total).setScale(3, RoundingMode.HALF_UP).doubleValue();
       
        orderForm.getCard().setCardNumber(new BCryptPasswordEncoder()
                .encode(orderForm.getCard().getCardNumber()));
        
        PaymentRequestDto paymentRequestBody = new PaymentRequestDto(
                sellerAutentication.getSellerId(),
                costumerDto,
                this.convertStringToPaymentType(orderForm.getPaymentType()),
                this.convertStringToCurrency(orderForm.getCurrency()),
                total,
                this.convertCardFormToDto(orderForm.getCard()));
                
        
        ObjectMapper mapper = new ObjectMapper();
        String paymentRequestBodyToJSON = new String();
        try {
            paymentRequestBodyToJSON = mapper.writeValueAsString(paymentRequestBody);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        return paymentRequestBodyToJSON;
    }

    public HttpHeaders createPaymentRequestHeader(Token token) {
        HttpHeaders header = new HttpHeaders();
        header.setContentType(MediaType.APPLICATION_JSON);
        header.add("Authorization", "Bearer " + token.getAccessToken());
        return header;
    }

    public PaymentResponseForm sendPaymentRequest(String paymentRequestBodyJSON,
            HttpHeaders paymentRequestHeader) {
        RestTemplate rest = new RestTemplate();
        String url = "https://pb-getway-payment.herokuapp.com/v1/payments/credit-card";

        HttpEntity<String> httpEntity = new HttpEntity<String>(paymentRequestBodyJSON, paymentRequestHeader);
        ResponseEntity<PaymentResponseForm> response = rest.exchange(url, HttpMethod.POST, httpEntity,
                PaymentResponseForm.class);
        return response.getBody();
    }

    public PaymentEntity convertPaymentResponseFormToPaymentEntity(PaymentResponseForm paymentResponseForm) {
        PaymentEntity paymentEntity = new PaymentEntity();
        paymentEntity.setTotal(paymentResponseForm.getTransactionAmount());
        paymentEntity.setPaymentId(paymentResponseForm.getPaymentId());
        paymentEntity.setPaymentStatus(this.convertStringToPaymentStatus(paymentResponseForm.getStatus()));
        paymentEntity.setMessage(paymentResponseForm.getAuthorization().getReasonMessage());
        return paymentEntity;
    }

    

    public Token authenticate() {
        String url = "https://pb-getway-payment.herokuapp.com/v1/auth";
        RestTemplate restTemplate = new RestTemplate();
        SellerAutentication sellerAutentication = new SellerAutentication();

        ClientAutenticationDto clientAutenticationDto = new ClientAutenticationDto(
                sellerAutentication.getSellerClientId(),
                sellerAutentication.getSellerApiKey());

        ResponseEntity<Token> auth = restTemplate.postForEntity(url, clientAutenticationDto, Token.class);
        Token token = auth.getBody();

        return token;
    }

    public Brand convertStringToBrand(String brand) {
        return Arrays.stream(Brand.values()).filter(br -> br.getName().equalsIgnoreCase(brand))
            .findFirst().orElseThrow(() -> new InvalidValueException("The value for 'brand' is invalid: '" + brand + "'"));   
    }
    
    public Currency convertStringToCurrency(String currency) {
        return Arrays.stream(Currency.values()).filter(cr -> cr.getName().equalsIgnoreCase(currency))
            .findFirst().orElseThrow(() -> new InvalidValueException("The value for 'currency' is invalid: '" + currency + "'"));   
    }
    
    public PaymentType convertStringToPaymentType(String paymentType) {
        return Arrays.stream(PaymentType.values()).filter(cr -> cr.getName().equalsIgnoreCase(paymentType))
            .findFirst().orElseThrow(() -> new InvalidValueException("The value for 'payment_type' is invalid: '" + paymentType + "'"));   
    }
    
    public PaymentStatus convertStringToPaymentStatus(String paymentStatus) {
        return Arrays.stream(PaymentStatus.values()).filter(ps -> ps.getName().equalsIgnoreCase(paymentStatus))
            .findFirst().orElseThrow(() -> new InvalidValueException("The value for 'payment_status' is invalid: '" + paymentStatus + "'"));   
    }
}
