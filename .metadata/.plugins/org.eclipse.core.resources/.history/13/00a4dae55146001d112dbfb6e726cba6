package com.example.avalicao04.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.avalicao04.autentication.Token;
import com.example.avalicao04.dto.PaymentDto;
import com.example.avalicao04.dto.PaymentRequestDto;
import com.example.avalicao04.entity.PaymentEntity;
import com.example.avalicao04.form.OrderForm;
import com.example.avalicao04.repository.PaymentRepository;
import com.example.avalicao04.util.MappersUtil;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class PaymentService {
	
	@Autowired
	private PaymentRepository paymentRepository;
	
	private Token token;
	private LocalDateTime tokenExpirationTime;
		
	public List<PaymentDto> showAllPayments() {
		List<PaymentEntity> paymentsEntity = paymentRepository.findAll();
		List<PaymentDto> paymentsDto = new ArrayList<>();
		for(int i = 0; i < paymentsEntity.size(); i++) {
			paymentsDto.add(MappersUtil.convertPaymentEntityToDto(paymentsEntity.get(i)));
		}
		return paymentsDto;
	}

	public ResponseEntity<PaymentDto> showOnePayment(Long id) {
		Optional<PaymentEntity> paymentEntity = paymentRepository.findById(id);
		if(paymentEntity.isPresent()) {
			PaymentDto paymentDto = MappersUtil.convertPaymentEntityToDto(paymentEntity.get());
			return ResponseEntity.ok(paymentDto);
		}
		return ResponseEntity.notFound().build();
	}
	
	public ResponseEntity<?> makePayment(OrderForm orderForm) {	
		if(token == null || tokenExpirationTime.compareTo(LocalDateTime.now()) < 0) {
		    token = MappersUtil.authenticate();
	        tokenExpirationTime = LocalDateTime.now().plusMinutes(3);
		}
		PaymentRequestDto paymentRequest = MappersUtil.createPaymentRequest(orderForm);	
		
		
		ObjectMapper mapper = new ObjectMapper();
		String str = new String();
		try {
		    str = mapper.writeValueAsString(paymentRequest);
            System.out.println(str);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
				
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.add("Authorization", "Bearer " + token.getAccess_token());
	
		RestTemplate rest = new RestTemplate();
		String url = "https://pb-getway-payment.herokuapp.com/v1/payments/credit-card";
		
		HttpEntity<String> httpEntity = new HttpEntity<String>(str,headers);
		ResponseEntity<Object> auth = rest.exchange(url, HttpMethod.POST, httpEntity, Object.class);
		
		return ResponseEntity.ok(auth);
	}
	
	public void teste() {
	    String url = "http://viacep.com.br/ws/13456652/json/";
        RestTemplate restTemplate = new RestTemplate();
        Object endereco = restTemplate.getForObject(url, Object.class);
        System.out.println(endereco);
	}
}
